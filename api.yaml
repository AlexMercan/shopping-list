openapi: 3.0.0
info:
  title: Shopping List API
  description: RESTful backend service for managing shopping lists and grocery items
  version: 1.0.0

paths:
  /shopping-lists:
    get:
      summary: Get all shopping lists
      description: Retrieve all shopping lists for the authenticated user
      operationId: getShoppingLists
      tags:
        - Shopping Lists
      responses:
        '200':
          description: List of shopping lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create a new shopping list
      description: Create a new shopping list for the authenticated user
      operationId: createShoppingList
      tags:
        - Shopping Lists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShoppingListRequest'
      responses:
        '201':
          description: Shopping list created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  /shopping-lists/{listId}:
    delete:
      summary: Delete a shopping list
      description: Delete a shopping list and all its items
      operationId: deleteShoppingList
      tags:
        - Shopping Lists
      parameters:
        - $ref: '#/components/parameters/ListId'
      responses:
        '204':
          description: Shopping list deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /shopping-lists/{listId}/items:
    post:
      summary: Add an item to a shopping list
      description: Add a new grocery item to a shopping list
      operationId: addGroceryItem
      tags:
        - Grocery Items
      parameters:
        - $ref: '#/components/parameters/ListId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroceryItemRequest'
      responses:
        '201':
          description: Grocery item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroceryItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /shopping-lists/{listId}/items/{itemId}:
    put:
      summary: Update a grocery item
      description: Update grocery item details (name, quantity)
      operationId: updateGroceryItem
      tags:
        - Grocery Items
      parameters:
        - $ref: '#/components/parameters/ListId'
        - $ref: '#/components/parameters/ItemId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroceryItemRequest'
      responses:
        '200':
          description: Grocery item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroceryItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
  /shopping-lists/{listId}/items/{itemId}/toggle:
    patch:
      summary: Toggle item completion status
      description: Tick off or untick a grocery item (toggle completed status)
      operationId: toggleGroceryItem
      tags:
        - Grocery Items
      parameters:
        - $ref: '#/components/parameters/ListId'
        - $ref: '#/components/parameters/ItemId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleGroceryItemRequest'
      responses:
        '200':
          description: Grocery item status toggled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroceryItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    ShoppingList:
      type: object
      required:
        - id
        - name
        - createdAt
        - version
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the shopping list
        name:
          type: string
          description: Name of the shopping list
          example: "Weekly Groceries"
        createdAt:
          type: string
          format: date-time
          description: When the shopping list was created
          example: "2023-03-15T10:30:00Z"
        shoppingItems:
            type: array
            items:
              $ref: '#/components/schemas/GroceryItem'
        version:
          type: integer
          format: int64
          description: Version number
          example: 1
    GroceryItem:
      type: object
      required:
        - id
        - name
        - quantity
        - completed
        - version
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the grocery item
        name:
          type: string
          maxLength: 255
          description: Name of the grocery item
          example: "Organic Bananas"
        quantity:
          type: integer
          format: int32
          description: Quantity of the item
          example: 2
        completed:
          type: boolean
          description: Whether the item has been ticked off
          example: false
        version:
          type: integer
          format: int64
          description: Version number for optimistic locking
          example: 1
    CreateShoppingListRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 255
          description: Name of the shopping list
          example: "Weekly Groceries"
    CreateGroceryItemRequest:
      type: object
      required:
        - name
        - quantity
      properties:
        name:
          type: string
          maxLength: 255
          description: Name of the grocery item
          example: "Organic Bananas"
        quantity:
          type: integer
          format: int32
          description: Quantity of the item
    UpdateGroceryItemRequest:
      type: object
      required:
        - version
      properties:
        name:
          type: string
          maxLength: 255
          description: Updated name of the grocery item
          example: "Organic Bananas - Large"
        quantity:
          type: integer
          format: int32
          description: Updated quantity
        version:
          type: integer
          format: int64
          description: Current version for optimistic locking
          example: 1
    ToggleGroceryItemRequest:
      type: object
      required:
        - version
      properties:
        version:
          type: integer
          format: int64
          description: Current version for optimistic locking
          example: 1

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "The request contains invalid data"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field that caused the error
                example: "name"
              message:
                type: string
                description: Field-specific error message
                example: "Name is required"
    ConflictError:
      type: object
      required:
        - error
        - message
        - currentVersion
      properties:
        error:
          type: string
          description: Error code
          example: "STALE_DATA"
        message:
          type: string
          description: Human-readable error message
          example: "The resource has been modified by another user"
        currentVersion:
          type: integer
          format: int64
          description: Current version of the resource
          example: 3
  parameters:
    ListId:
      name: listId
      in: path
      required: true
      description: Unique identifier of the shopping list
      schema:
        type: integer
        format: int64
    ItemId:
      name: itemId
      in: path
      required: true
      description: Unique identifier of the grocery item
      schema:
        type: integer
        format: int64
  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Conflict - stale data detected
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictError'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

security:
  - ApiKeyAuth: []

tags:
  - name: Shopping Lists
    description: Operations for managing shopping lists
  - name: Grocery Items
    description: Operations for managing grocery items within shopping lists
