//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ConflictError defines model for ConflictError.
type ConflictError struct {
	// CurrentVersion Current version of the resource
	CurrentVersion int64 `json:"currentVersion"`

	// Error Error code
	Error string `json:"error"`

	// LastModified When the resource was last modified
	LastModified *time.Time `json:"lastModified,omitempty"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// CreateGroceryItemRequest defines model for CreateGroceryItemRequest.
type CreateGroceryItemRequest struct {
	// Name Name of the grocery item
	Name string `json:"name"`

	// Quantity Quantity of the item
	Quantity int32 `json:"quantity"`
}

// CreateShoppingListRequest defines model for CreateShoppingListRequest.
type CreateShoppingListRequest struct {
	// Name Name of the shopping list
	Name string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Details *[]struct {
		// Field Field that caused the error
		Field *string `json:"field,omitempty"`

		// Message Field-specific error message
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`

	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// GroceryItem defines model for GroceryItem.
type GroceryItem struct {
	// Completed Whether the item has been ticked off
	Completed bool `json:"completed"`

	// Id Unique identifier for the grocery item
	Id int64 `json:"id"`

	// Name Name of the grocery item
	Name string `json:"name"`

	// Quantity Quantity of the item
	Quantity int32 `json:"quantity"`

	// Version Version number for optimistic locking
	Version int64 `json:"version"`
}

// ShoppingList defines model for ShoppingList.
type ShoppingList struct {
	// CreatedAt When the shopping list was created
	CreatedAt time.Time `json:"createdAt"`

	// Description Optional description of the shopping list
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the shopping list
	Id int64 `json:"id"`

	// Name Name of the shopping list
	Name          string         `json:"name"`
	ShoppingItems *[]GroceryItem `json:"shoppingItems,omitempty"`

	// Version Version number
	Version int64 `json:"version"`
}

// ToggleGroceryItemRequest defines model for ToggleGroceryItemRequest.
type ToggleGroceryItemRequest struct {
	// Version Current version for optimistic locking
	Version int64 `json:"version"`
}

// UpdateGroceryItemRequest defines model for UpdateGroceryItemRequest.
type UpdateGroceryItemRequest struct {
	// Name Updated name of the grocery item
	Name *string `json:"name,omitempty"`

	// Quantity Updated quantity
	Quantity *int32 `json:"quantity,omitempty"`

	// Version Current version for optimistic locking
	Version int64 `json:"version"`
}

// ItemId defines model for ItemId.
type ItemId = int64

// ListId defines model for ListId.
type ListId = int64

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Conflict defines model for Conflict.
type Conflict = ConflictError

// InternalError defines model for InternalError.
type InternalError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// CreateShoppingListJSONRequestBody defines body for CreateShoppingList for application/json ContentType.
type CreateShoppingListJSONRequestBody = CreateShoppingListRequest

// AddGroceryItemJSONRequestBody defines body for AddGroceryItem for application/json ContentType.
type AddGroceryItemJSONRequestBody = CreateGroceryItemRequest

// UpdateGroceryItemJSONRequestBody defines body for UpdateGroceryItem for application/json ContentType.
type UpdateGroceryItemJSONRequestBody = UpdateGroceryItemRequest

// ToggleGroceryItemJSONRequestBody defines body for ToggleGroceryItem for application/json ContentType.
type ToggleGroceryItemJSONRequestBody = ToggleGroceryItemRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all shopping lists
	// (GET /shopping-lists)
	GetShoppingLists(w http.ResponseWriter, r *http.Request)
	// Create a new shopping list
	// (POST /shopping-lists)
	CreateShoppingList(w http.ResponseWriter, r *http.Request)
	// Delete a shopping list
	// (DELETE /shopping-lists/{listId})
	DeleteShoppingList(w http.ResponseWriter, r *http.Request, listId ListId)
	// Add an item to a shopping list
	// (POST /shopping-lists/{listId}/items)
	AddGroceryItem(w http.ResponseWriter, r *http.Request, listId ListId)
	// Update a grocery item
	// (PUT /shopping-lists/{listId}/items/{itemId})
	UpdateGroceryItem(w http.ResponseWriter, r *http.Request, listId ListId, itemId ItemId)
	// Toggle item completion status
	// (PATCH /shopping-lists/{listId}/items/{itemId}/toggle)
	ToggleGroceryItem(w http.ResponseWriter, r *http.Request, listId ListId, itemId ItemId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetShoppingLists operation middleware
func (siw *ServerInterfaceWrapper) GetShoppingLists(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetShoppingLists(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateShoppingList operation middleware
func (siw *ServerInterfaceWrapper) CreateShoppingList(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateShoppingList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteShoppingList operation middleware
func (siw *ServerInterfaceWrapper) DeleteShoppingList(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId ListId

	err = runtime.BindStyledParameterWithOptions("simple", "listId", r.PathValue("listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteShoppingList(w, r, listId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddGroceryItem operation middleware
func (siw *ServerInterfaceWrapper) AddGroceryItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId ListId

	err = runtime.BindStyledParameterWithOptions("simple", "listId", r.PathValue("listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddGroceryItem(w, r, listId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateGroceryItem operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroceryItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId ListId

	err = runtime.BindStyledParameterWithOptions("simple", "listId", r.PathValue("listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemId

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", r.PathValue("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGroceryItem(w, r, listId, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ToggleGroceryItem operation middleware
func (siw *ServerInterfaceWrapper) ToggleGroceryItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId ListId

	err = runtime.BindStyledParameterWithOptions("simple", "listId", r.PathValue("listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId ItemId

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", r.PathValue("itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ToggleGroceryItem(w, r, listId, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/shopping-lists", wrapper.GetShoppingLists)
	m.HandleFunc("POST "+options.BaseURL+"/shopping-lists", wrapper.CreateShoppingList)
	m.HandleFunc("DELETE "+options.BaseURL+"/shopping-lists/{listId}", wrapper.DeleteShoppingList)
	m.HandleFunc("POST "+options.BaseURL+"/shopping-lists/{listId}/items", wrapper.AddGroceryItem)
	m.HandleFunc("PUT "+options.BaseURL+"/shopping-lists/{listId}/items/{itemId}", wrapper.UpdateGroceryItem)
	m.HandleFunc("PATCH "+options.BaseURL+"/shopping-lists/{listId}/items/{itemId}/toggle", wrapper.ToggleGroceryItem)

	return m
}

type BadRequestJSONResponse Error

type ConflictJSONResponse ConflictError

type InternalErrorJSONResponse Error

type NotFoundJSONResponse Error

type UnauthorizedJSONResponse Error

type GetShoppingListsRequestObject struct {
}

type GetShoppingListsResponseObject interface {
	VisitGetShoppingListsResponse(w http.ResponseWriter) error
}

type GetShoppingLists200JSONResponse []ShoppingList

func (response GetShoppingLists200JSONResponse) VisitGetShoppingListsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetShoppingLists401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetShoppingLists401JSONResponse) VisitGetShoppingListsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetShoppingLists500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetShoppingLists500JSONResponse) VisitGetShoppingListsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateShoppingListRequestObject struct {
	Body *CreateShoppingListJSONRequestBody
}

type CreateShoppingListResponseObject interface {
	VisitCreateShoppingListResponse(w http.ResponseWriter) error
}

type CreateShoppingList201JSONResponse ShoppingList

func (response CreateShoppingList201JSONResponse) VisitCreateShoppingListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateShoppingList400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateShoppingList400JSONResponse) VisitCreateShoppingListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateShoppingList401JSONResponse struct{ UnauthorizedJSONResponse }

func (response CreateShoppingList401JSONResponse) VisitCreateShoppingListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateShoppingList500JSONResponse struct{ InternalErrorJSONResponse }

func (response CreateShoppingList500JSONResponse) VisitCreateShoppingListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteShoppingListRequestObject struct {
	ListId ListId `json:"listId"`
}

type DeleteShoppingListResponseObject interface {
	VisitDeleteShoppingListResponse(w http.ResponseWriter) error
}

type DeleteShoppingList204Response struct {
}

func (response DeleteShoppingList204Response) VisitDeleteShoppingListResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteShoppingList401JSONResponse struct{ UnauthorizedJSONResponse }

func (response DeleteShoppingList401JSONResponse) VisitDeleteShoppingListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteShoppingList404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteShoppingList404JSONResponse) VisitDeleteShoppingListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteShoppingList500JSONResponse struct{ InternalErrorJSONResponse }

func (response DeleteShoppingList500JSONResponse) VisitDeleteShoppingListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddGroceryItemRequestObject struct {
	ListId ListId `json:"listId"`
	Body   *AddGroceryItemJSONRequestBody
}

type AddGroceryItemResponseObject interface {
	VisitAddGroceryItemResponse(w http.ResponseWriter) error
}

type AddGroceryItem201JSONResponse GroceryItem

func (response AddGroceryItem201JSONResponse) VisitAddGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddGroceryItem400JSONResponse struct{ BadRequestJSONResponse }

func (response AddGroceryItem400JSONResponse) VisitAddGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddGroceryItem401JSONResponse struct{ UnauthorizedJSONResponse }

func (response AddGroceryItem401JSONResponse) VisitAddGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddGroceryItem404JSONResponse struct{ NotFoundJSONResponse }

func (response AddGroceryItem404JSONResponse) VisitAddGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddGroceryItem500JSONResponse struct{ InternalErrorJSONResponse }

func (response AddGroceryItem500JSONResponse) VisitAddGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroceryItemRequestObject struct {
	ListId ListId `json:"listId"`
	ItemId ItemId `json:"itemId"`
	Body   *UpdateGroceryItemJSONRequestBody
}

type UpdateGroceryItemResponseObject interface {
	VisitUpdateGroceryItemResponse(w http.ResponseWriter) error
}

type UpdateGroceryItem200JSONResponse GroceryItem

func (response UpdateGroceryItem200JSONResponse) VisitUpdateGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroceryItem400JSONResponse struct{ BadRequestJSONResponse }

func (response UpdateGroceryItem400JSONResponse) VisitUpdateGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroceryItem401JSONResponse struct{ UnauthorizedJSONResponse }

func (response UpdateGroceryItem401JSONResponse) VisitUpdateGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroceryItem404JSONResponse struct{ NotFoundJSONResponse }

func (response UpdateGroceryItem404JSONResponse) VisitUpdateGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroceryItem409JSONResponse struct{ ConflictJSONResponse }

func (response UpdateGroceryItem409JSONResponse) VisitUpdateGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateGroceryItem500JSONResponse struct{ InternalErrorJSONResponse }

func (response UpdateGroceryItem500JSONResponse) VisitUpdateGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ToggleGroceryItemRequestObject struct {
	ListId ListId `json:"listId"`
	ItemId ItemId `json:"itemId"`
	Body   *ToggleGroceryItemJSONRequestBody
}

type ToggleGroceryItemResponseObject interface {
	VisitToggleGroceryItemResponse(w http.ResponseWriter) error
}

type ToggleGroceryItem200JSONResponse GroceryItem

func (response ToggleGroceryItem200JSONResponse) VisitToggleGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ToggleGroceryItem400JSONResponse struct{ BadRequestJSONResponse }

func (response ToggleGroceryItem400JSONResponse) VisitToggleGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ToggleGroceryItem401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ToggleGroceryItem401JSONResponse) VisitToggleGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ToggleGroceryItem404JSONResponse struct{ NotFoundJSONResponse }

func (response ToggleGroceryItem404JSONResponse) VisitToggleGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ToggleGroceryItem409JSONResponse struct{ ConflictJSONResponse }

func (response ToggleGroceryItem409JSONResponse) VisitToggleGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ToggleGroceryItem500JSONResponse struct{ InternalErrorJSONResponse }

func (response ToggleGroceryItem500JSONResponse) VisitToggleGroceryItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all shopping lists
	// (GET /shopping-lists)
	GetShoppingLists(ctx context.Context, request GetShoppingListsRequestObject) (GetShoppingListsResponseObject, error)
	// Create a new shopping list
	// (POST /shopping-lists)
	CreateShoppingList(ctx context.Context, request CreateShoppingListRequestObject) (CreateShoppingListResponseObject, error)
	// Delete a shopping list
	// (DELETE /shopping-lists/{listId})
	DeleteShoppingList(ctx context.Context, request DeleteShoppingListRequestObject) (DeleteShoppingListResponseObject, error)
	// Add an item to a shopping list
	// (POST /shopping-lists/{listId}/items)
	AddGroceryItem(ctx context.Context, request AddGroceryItemRequestObject) (AddGroceryItemResponseObject, error)
	// Update a grocery item
	// (PUT /shopping-lists/{listId}/items/{itemId})
	UpdateGroceryItem(ctx context.Context, request UpdateGroceryItemRequestObject) (UpdateGroceryItemResponseObject, error)
	// Toggle item completion status
	// (PATCH /shopping-lists/{listId}/items/{itemId}/toggle)
	ToggleGroceryItem(ctx context.Context, request ToggleGroceryItemRequestObject) (ToggleGroceryItemResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetShoppingLists operation middleware
func (sh *strictHandler) GetShoppingLists(w http.ResponseWriter, r *http.Request) {
	var request GetShoppingListsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetShoppingLists(ctx, request.(GetShoppingListsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetShoppingLists")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetShoppingListsResponseObject); ok {
		if err := validResponse.VisitGetShoppingListsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateShoppingList operation middleware
func (sh *strictHandler) CreateShoppingList(w http.ResponseWriter, r *http.Request) {
	var request CreateShoppingListRequestObject

	var body CreateShoppingListJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateShoppingList(ctx, request.(CreateShoppingListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateShoppingList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateShoppingListResponseObject); ok {
		if err := validResponse.VisitCreateShoppingListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteShoppingList operation middleware
func (sh *strictHandler) DeleteShoppingList(w http.ResponseWriter, r *http.Request, listId ListId) {
	var request DeleteShoppingListRequestObject

	request.ListId = listId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteShoppingList(ctx, request.(DeleteShoppingListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteShoppingList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteShoppingListResponseObject); ok {
		if err := validResponse.VisitDeleteShoppingListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddGroceryItem operation middleware
func (sh *strictHandler) AddGroceryItem(w http.ResponseWriter, r *http.Request, listId ListId) {
	var request AddGroceryItemRequestObject

	request.ListId = listId

	var body AddGroceryItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddGroceryItem(ctx, request.(AddGroceryItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddGroceryItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddGroceryItemResponseObject); ok {
		if err := validResponse.VisitAddGroceryItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateGroceryItem operation middleware
func (sh *strictHandler) UpdateGroceryItem(w http.ResponseWriter, r *http.Request, listId ListId, itemId ItemId) {
	var request UpdateGroceryItemRequestObject

	request.ListId = listId
	request.ItemId = itemId

	var body UpdateGroceryItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateGroceryItem(ctx, request.(UpdateGroceryItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateGroceryItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateGroceryItemResponseObject); ok {
		if err := validResponse.VisitUpdateGroceryItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ToggleGroceryItem operation middleware
func (sh *strictHandler) ToggleGroceryItem(w http.ResponseWriter, r *http.Request, listId ListId, itemId ItemId) {
	var request ToggleGroceryItemRequestObject

	request.ListId = listId
	request.ItemId = itemId

	var body ToggleGroceryItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ToggleGroceryItem(ctx, request.(ToggleGroceryItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ToggleGroceryItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ToggleGroceryItemResponseObject); ok {
		if err := validResponse.VisitToggleGroceryItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
